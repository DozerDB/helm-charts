# Copyright 2020 HAProxy Technologies LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## @param nameOverride String to partially override common.names.fullname
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
fullnameOverride: ""

## Details to access the Neo4j service
neo4j:
  # serviceName will usually be the value of `neo4j.name` used in the Neo4j helm chart,
  # suffixed with -lb-neo4j. So if `neo4j.name` is equal to "my-cluster" serviceName will be "my-cluster-lb-neo4j"
  # Alternatively, you can manually create a service for the Neo4j Database cluster
  serviceName:
  boltPort: 7687
  httpPort: 7474
## Default values for HAProxy
haproxy:
  config: |
    global
        log stdout format raw local0
        lua-prepend-path /usr/local/etc/haproxy/?.lua
        lua-load /usr/local/etc/haproxy/discovery.lua
    
    defaults
        log	global
        timeout	connect	5000
        timeout	client	50000
        timeout	server	50000
        timeout	tunnel	1200000
    
    frontend generic-in
        bind *:8080
        acl is_websocket hdr(Upgrade) -i WebSocket
        acl is_websocket hdr_beg(Host) -i ws
        acl is_json hdr(accept) -i -m str "application/json"
        acl is_get method GET
        acl is_root path -i /
        tcp-request inspect-delay 20s
        acl content_present req_len gt 0
        tcp-request content accept if content_present
        use_backend neo4j-bolt if !HTTP
        use_backend neo4j-bolt if is_websocket
        use_backend neo4j-discovery if is_json is_root is_get
        default_backend neo4j-http
    
    backend neo4j-http
        mode http
        option httpchk
        option forwardfor
        server neo4j-browser "${NEO4J_HTTP}" check port 7474 inter 5s rise 2  maxconn 128
    
    backend neo4j-bolt
        mode tcp
        option tcp-check
        server neo4j-bolt "${NEO4J_BOLT}" check port 7687 inter 5s rise 2 fall 3 maxconn 2048
    backend neo4j-discovery
        mode http
        http-request use-service lua.neo4j_discovery
  ## Container listener port configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
  containerPorts:   # has to match hostPorts when useHostNetwork is true
    http: 8080
    stat: 1024
  ## Configure Ingress
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    servicePort: 8080

    ## Ingress class
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
    className: ""

    ## Ingress labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    labels: {}

    ## Ingress annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

    ## Ingress hosts
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    hosts:
      - host: haproxy.domain.com
        paths:
          - path: /
            pathType: ImplementationSpecific

    ## Ingress TLS
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    tls: []
      # - secretName: chart-example-tls
      #   hosts:
    #     - haproxy.domain.com