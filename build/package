#!/usr/bin/env bash

# This packages helm charts into signed tarballs

# make bash play nicely
#
set -o pipefail -o errtrace -o errexit -o nounset
shopt -s inherit_errexit
[[ -n "${TRACE:-}" ]] && set -o xtrace

# Local env vars
#
BUILD_OUT_DIR="tmp/new-packages/"
S3_LOCAL_SYNC_DIR="tmp/release-packages"
S3_UPLOAD_TO_SUB_FOLDER="${S3_SUB_FOLDER:-neo4j}"
S3_CACHE_CONTROL_MAX_AGE_SECONDS="${S3_CACHE_CONTROL_MAX_AGE_SECONDS:-300}"

#getting the Neo4j Version from Team City
NEO4J_VERSION_TC="${NEO4JVERSION}"
[ -z "$NEO4J_VERSION_TC" ] && echo "NEO4JVERSION cannot be empty" && exit 1

NEO4J_VERSION=$(echo "${NEO4J_VERSION_TC}" | awk -F "-" '{print $1}')
echo "NEO4J VERSION := ${NEO4J_VERSION}"

# Required env vars
#
PACKAGE_SIGNING_KEY="${PACKAGE_SIGNING_KEY:?PACKAGE_SIGNING_KEY is required}"
# to create a keyring try gpg --export-secret-keys "<ID of the key you want to use to sign>" >~/.gnupg/secring.gpg
PACKAGE_SIGNING_KEYRING="${PACKAGE_SIGNING_KEYRING:?PACKAGE_SIGNING_KEYRING is required}"
PACKAGE_SIGNING_PASSPHRASE="${PACKAGE_SIGNING_PASSPHRASE:?PACKAGE_SIGNING_PASSPHRASE is required}"

#Create the build out directory where the helm packages will be placed
mkdir -p ${BUILD_OUT_DIR}

# create neo4j-shared-templates with updated app-version and replace the older neo4j-shared-templates with the new one
helm package ./neo4j-shared-templates --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}"
rm -rf ./neo4j-shared-templates
tar -xvf "${BUILD_OUT_DIR}"neo4j-shared-templates*.tgz -C ./

# create the package!
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-standalone --dependency-update --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}" --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-cluster-core --dependency-update --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}" --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-cluster-loadbalancer --dependency-update --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}" --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-cluster-read-replica --dependency-update --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}" --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-cluster-headless-service --dependency-update --app-version="${NEO4J_VERSION}" --destination "${BUILD_OUT_DIR}" --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
# echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-docker-desktop-pv --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
# echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-gcloud-pv --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -

#remove neo4j shared templates tar as we dont want to upload it to helm repo
rm -f "${BUILD_OUT_DIR}"neo4j-shared-templates*.tgz

# Upload packages

# Pull existing packages from s3
#
mkdir -p ${S3_LOCAL_SYNC_DIR}
aws s3 sync s3://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER} ${S3_LOCAL_SYNC_DIR}
cp ${BUILD_OUT_DIR}/* ${S3_LOCAL_SYNC_DIR} || echo "nothing to upload in ./packages/"

# Create index.yaml
#
helm repo index ${S3_LOCAL_SYNC_DIR} --url https://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER}

# Upload new packages to s3
#
aws s3 sync --acl bucket-owner-full-control --cache-control max-age=${S3_CACHE_CONTROL_MAX_AGE_SECONDS} ${S3_LOCAL_SYNC_DIR} s3://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER}

# Clean up local packages
#rm ./packages/*
